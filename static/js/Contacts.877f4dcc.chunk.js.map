{"version":3,"sources":["redux/phonebook/contact-selectors.js","components/contacts/form/Form.js","redux/phonebook/contact-operations.js","components/contacts/filter/Filter.js","components/contacts/singleContact/SingleContact.js","components/contacts/contactList/ContactList.js","pages/contactsPage/ContactsPage.js"],"names":["itemsSelector","state","contacts","items","filterSelector","filter","getFilteredContact","createSelector","normalizedFilter","toLowerCase","contact","name","includes","getContactById","_","contactId","find","id","initState","number","Form","handlerChange","target","value","setState","handlerSubmit","event","preventDefault","props","some","toast","error","addContact","this","className","onSubmit","type","pattern","placeholder","title","required","onChange","Component","mapDispatchToProps","dispatch","getState","a","localId","auth","user","addContactRequest","axios","post","response","data","addContactSuccess","addContactError","connect","filterContact","ownProps","deleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","onClick","aria-hidden","TransitionGroup","component","map","CSSTransition","classNames","timeout","Contacts","animation","onGetContacts","in","appear","unmountOnExit","length","autoClose","position","idToken","getContactsRequest","token","defaults","params","get","Object","keys","key","getContactsSuccess","getContactsError"],"mappings":"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","file":"static/js/Contacts.877f4dcc.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const itemsSelector = state => state.contacts.items;\r\nexport const filterSelector = state => state.contacts.filter;\r\n\r\nexport const getFilteredContact = createSelector(\r\n  [itemsSelector, filterSelector],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport const getContactById = createSelector(\r\n  [itemsSelector, (_, contactId) => contactId],\r\n  (items, contactId) => items.find(contact => contact.id === contactId),\r\n);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../../redux/phonebook/contact-operations';\r\nimport {\r\n  filterSelector,\r\n  itemsSelector,\r\n} from '../../../redux/phonebook/contact-selectors';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Form.scss';\r\n\r\nconst initState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    ...initState,\r\n  };\r\n\r\n  handlerChange = ({ target }) => {\r\n    const { value, name } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handlerSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const contact = { name, number };\r\n    const { contacts } = this.props;\r\n    const isExists = contacts.some(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (isExists) {\r\n      toast.error('This contact is already exist');\r\n      return this.setState({ ...initState });\r\n    }\r\n\r\n    this.props.addContact(contact);\r\n    this.setState({ ...initState });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form className=\"form\" onSubmit={this.handlerSubmit}>\r\n          <label className=\"form_label\">\r\n            Name\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              placeholder=\"John Smith\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <label className=\"form_label\">\r\n            Number\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{3})\"\r\n              placeholder=\"+48-796-287-373\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className=\"form_button\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: itemsSelector(state),\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import axios from 'axios';\r\nimport {\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contact-actions';\r\n\r\nconst setAuthToken = token => {\r\n  axios.defaults.params = {\r\n    auth: token,\r\n  };\r\n};\r\n\r\nexport const getContacts = () => async (dispatch, getState) => {\r\n  const {\r\n    user: { localId, idToken },\r\n  } = getState().auth;\r\n\r\n  dispatch(getContactsRequest());\r\n  setAuthToken(idToken);\r\n\r\n  try {\r\n    const response = await axios.get(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com/users/${localId}/contacts.json`,\r\n    );\r\n\r\n    if (response.data) {\r\n      const contacts = Object.keys(response.data).map(key => ({\r\n        id: key,\r\n        ...response.data[key],\r\n      }));\r\n      dispatch(getContactsSuccess(contacts));\r\n    }\r\n  } catch (error) {\r\n    dispatch(getContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = contact => async (dispatch, getState) => {\r\n  const {\r\n    user: { localId },\r\n  } = getState().auth;\r\n\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const response = await axios.post(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com/users/${localId}/contacts.json`,\r\n      contact,\r\n    );\r\n    response.data &&\r\n      dispatch(addContactSuccess({ id: response.data.name, ...contact }));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async (dispatch, getState) => {\r\n  const {\r\n    user: { localId },\r\n  } = getState().auth;\r\n\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com//users/${localId}/contacts/${id}.json`,\r\n    );\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { filterContact } from '../../../redux/phonebook/contact-actions';\r\nimport { filterSelector } from '../../../redux/phonebook/contact-selectors';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ filter, filterContact }) => {\r\n  return (\r\n    <div className=\"filter_container\">\r\n      <label className=\"filter_label\">\r\n        Filter\r\n        <input\r\n          className=\"filter_input\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Find contacts by name\"\r\n          value={filter}\r\n          onChange={filterContact}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  filterContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string.isRequired,\r\n  filterContact: PropTypes.func.isRequired,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../../redux/phonebook/contact-operations';\r\nimport { getContactById } from '../../../redux/phonebook/contact-selectors';\r\nimport './SingleContact.scss';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className=\"contact\">\r\n      <h4>{name}</h4>\r\n      <p className=\"contact_number\">{number}</p>\r\n      <button className=\"delete_button\" type=\"button\" onClick={deleteContact}>\r\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" />\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = getContactById(state, ownProps.id);\r\n  return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nSingleContact.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { getFilteredContact } from '../../../redux/phonebook/contact-selectors';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contact_list\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n          <SingleContact id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getFilteredContact(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { getContacts } from '../../redux/phonebook/contact-operations';\r\nimport { itemsSelector } from '../../redux/phonebook/contact-selectors';\r\nimport Form from '../../components/contacts/form/Form';\r\nimport Filter from '../../components/contacts/filter/Filter';\r\nimport ContactList from '../../components/contacts/contactList/ContactList';\r\nimport './ContactsPage.scss';\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    animation: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onGetContacts();\r\n\r\n    this.setState(state => ({\r\n      animation: !state.animation,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app_container\">\r\n        {/* APPLICATION TITLE */}\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"title_slider\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"app_title\">Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        {/* APPLICATION FORM */}\r\n        <section className=\"section\">\r\n          <Form />\r\n        </section>\r\n\r\n        {/* CONTACTS FILTER */}\r\n        <CSSTransition\r\n          in={this.props.contacts.length > 1}\r\n          classNames=\"filter_animation\"\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <section className=\"section\">\r\n            <Filter />\r\n          </section>\r\n        </CSSTransition>\r\n\r\n        {/* CONTACTS LIST */}\r\n        <ContactList />\r\n\r\n        {/* ALERT NOTIFICATION */}\r\n        <ToastContainer autoClose={2500} position=\"top-right\" type=\"error\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: itemsSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onGetContacts: getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n"],"sourceRoot":""}